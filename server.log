Server running at http://localhost:3000
Available endpoints:
  - Main app: http://localhost:3000/
  - Test page: http://localhost:3000/test
  - Debug page: http://localhost:3000/debug
  - Earth Engine test: http://localhost:3000/test-ee
Private key loaded successfully
Authentication successful
Earth Engine client library initialized
EE-timelapse-layer endpoint called
Generating timelapse for year: 2000
Loading ERA5 dataset for year 2000...
Checking dataset size...
Found 365 images for year 2000
Calculating mean temperature...
Generating map ID and token...
Earth Engine result received: {
  "mapid": "projects/earthengine-legacy/maps/34f96c6ef44bef63b91d346fc2e9f7a0-4ada8d93a9b45a469a4087b93f4002fd",
  "token": "",
  "urlFormat": "https://earthengine.googleapis.com/v1/projects/earthengine-legacy/maps/34f96c6ef44bef63b91d346fc2e9f7a0-4ada8d93a9b45a469a4087b93f4002fd/tiles/{z}/{x}/{y}",
  "image": {
    "func": {
      "signature_": {
        "args": [
          {
            "description": "The image from which the left operand bands are taken.",
            "type": "Image",
            "name": "image1",
            "default": null
          },
          {
            "description": "The image from which the right operand bands are taken.",
            "type": "Image",
            "name": "image2",
            "default": null
          }
        ],
        "description": "Subtracts the second value from the first for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.",
        "returns": "Image",
        "name": "Image.subtract"
      }
    },
    "args": {
      "image1": {
        "func": {
          "signature_": {
            "args": [
              {
                "description": "The image collection to reduce.",
                "type": "ImageCollection",
                "name": "collection",
                "default": null
              }
            ],
            "description": "Reduces an image collection by calculating the mean of all values at each pixel across the stack of all matching bands. Bands are matched by name.",
            "returns": "Image",
            "name": "reduce.mean"
          }
        },
        "args": {
          "collection": {
            "func": {
              "signature_": {
                "args": [
                  {
                    "description": "The collection of the elements to which the algorithm is applied.",
                    "type": "FeatureCollection",
                    "name": "collection",
                    "default": null
                  },
                  {
                    "description": "The algorithm being applied to each element.",
                    "type": "Algorithm",
                    "name": "baseAlgorithm",
                    "default": null
                  },
                  {
                    "description": "If true, the mapped algorithm is allowed to return nulls, and the elements for which it returns nulls will be dropped.",
                    "type": "Boolean",
                    "name": "dropNulls",
                    "default": false,
                    "optional": true
                  }
                ],
                "description": "Maps an algorithm over a collection.",
                "returns": "FeatureCollection",
                "name": "Collection.map"
              }
            },
            "args": {
              "collection": {
                "func": {
                  "signature_": {
                    "args": [
                      {
                        "description": "The collection to filter.",
                        "type": "FeatureCollection",
                        "name": "collection",
                        "default": null
                      },
                      {
                        "description": "The filter to apply to the collection. Either a Filter object or a string to be parsed into a Filter object (e.g., \"property > value\"). Supported operators include: >, >=, <, <=, ==, !=, (), !, &&, ||, as well as 'and', 'or', 'not', and 'in' for inList.",
                        "type": "Object",
                        "name": "filter",
                        "default": null
                      }
                    ],
                    "description": "Applies a filter to a given collection.",
                    "returns": "FeatureCollection",
                    "name": "Collection.filter"
                  }
                },
                "args": {
                  "collection": {
                    "func": {
                      "signature_": {
                        "args": [
                          {
                            "description": "The asset ID of the image collection.",
                            "type": "String",
                            "name": "id",
                            "default": null
                          },
                          {
                            "description": "The version of the asset. -1 signifies the latest version.",
                            "type": "Long",
                            "name": "version",
                            "default": null,
                            "optional": true
                          }
                        ],
                        "description": "Returns the image collection given its ID.",
                        "returns": "ImageCollection",
                        "name": "ImageCollection.load"
                      }
                    },
                    "args": {
                      "id": "ECMWF/ERA5/DAILY"
                    },
                    "varName": null,
                    "sourceFrame": null
                  },
                  "filter": {
                    "func": {
                      "signature_": {
                        "args": [
                          {
                            "description": "A selector for the left operand. Should not be specified if leftValue is specified.",
                            "type": "String",
                            "name": "leftField",
                            "default": null,
                            "optional": true
                          },
                          {
                            "description": "The value of the right operand. Should not be specified if rightField is specified.",
                            "type": "Object",
                            "name": "rightValue",
                            "default": null,
                            "optional": true
                          },
                          {
                            "description": "A selector for the right operand. Should not be specified if rightValue is specified.",
                            "type": "String",
                            "name": "rightField",
                            "default": null,
                            "optional": true
                          },
                          {
                            "description": "The value of the left operand. Should not be specified if leftField is specified.",
                            "type": "Object",
                            "name": "leftValue",
                            "default": null,
                            "optional": true
                          }
                        ],
                        "description": "Creates a unary or binary filter that passes if the left operand, a date range, contains the right operand, a date.",
                        "returns": "Filter",
                        "name": "Filter.dateRangeContains"
                      }
                    },
                    "args": {
                      "rightField": {
                        "func": null,
                        "args": null,
                        "varName": null,
                        "sourceFrame": null,
                        "string_": "system:time_start"
                      },
                      "leftValue": {
                        "func": {
                          "signature_": {
                            "args": [
                              {
                                "description": "",
                                "type": "Object",
                                "name": "start",
                                "default": null
                              },
                              {
                                "description": "",
                                "type": "Object",
                                "name": "end",
                                "default": null,
                                "optional": true
                              },
                              {
                                "description": "If start and/or end are provided as strings, the time zone in which to interpret them; defaults to UTC.",
                                "type": "String",
                                "name": "timeZone",
                                "default": null,
                                "optional": true
                              }
                            ],
                            "description": "Creates a DateRange with the given start (inclusive) and end (exclusive), which may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). If 'end' is not specified, a 1-millisecond range starting at 'start' is created.",
                            "returns": "DateRange",
                            "name": "DateRange",
                            "isConstructor": true
                          }
                        },
                        "args": {
                          "start": "2000-01-01",
                          "end": "2000-12-31"
                        },
                        "varName": null,
                        "sourceFrame": null
                      }
                    },
                    "varName": null,
                    "sourceFrame": null,
                    "filter_": [
                      {
                        "func": {
                          "signature_": {
                            "args": [
                              {
                                "description": "A selector for the left operand. Should not be specified if leftValue is specified.",
                                "type": "String",
                                "name": "leftField",
                                "default": null,
                                "optional": true
                              },
                              {
                                "description": "The value of the right operand. Should not be specified if rightField is specified.",
                                "type": "Object",
                                "name": "rightValue",
                                "default": null,
                                "optional": true
                              },
                              {
                                "description": "A selector for the right operand. Should not be specified if rightValue is specified.",
                                "type": "String",
                                "name": "rightField",
                                "default": null,
                                "optional": true
                              },
                              {
                                "description": "The value of the left operand. Should not be specified if leftField is specified.",
                                "type": "Object",
                                "name": "leftValue",
                                "default": null,
                                "optional": true
                              }
                            ],
                            "description": "Creates a unary or binary filter that passes if the left operand, a date range, contains the right operand, a date.",
                            "returns": "Filter",
                            "name": "Filter.dateRangeContains"
                          }
                        },
                        "args": {
                          "rightField": {
                            "func": null,
                            "args": null,
                            "varName": null,
                            "sourceFrame": null,
                            "string_": "system:time_start"
                          },
                          "leftValue": {
                            "func": {
                              "signature_": {
                                "args": [
                                  {
                                    "description": "",
                                    "type": "Object",
                                    "name": "start",
                                    "default": null
                                  },
                                  {
                                    "description": "",
                                    "type": "Object",
                                    "name": "end",
                                    "default": null,
                                    "optional": true
                                  },
                                  {
                                    "description": "If start and/or end are provided as strings, the time zone in which to interpret them; defaults to UTC.",
                                    "type": "String",
                                    "name": "timeZone",
                                    "default": null,
                                    "optional": true
                                  }
                                ],
                                "description": "Creates a DateRange with the given start (inclusive) and end (exclusive), which may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). If 'end' is not specified, a 1-millisecond range starting at 'start' is created.",
                                "returns": "DateRange",
                                "name": "DateRange",
                                "isConstructor": true
                              }
                            },
                            "args": {
                              "start": "2000-01-01",
                              "end": "2000-12-31"
                            },
                            "varName": null,
                            "sourceFrame": null
                          }
                        },
                        "varName": null,
                        "sourceFrame": null
                      }
                    ]
                  }
                },
                "varName": null
              },
              "baseAlgorithm": {
                "signature_": {
                  "name": "",
                  "returns": "Object",
                  "args": [
                    {
                      "name": "_MAPPING_VAR_0_0",
                      "type": "Object"
                    }
                  ]
                },
                "body_": {
                  "func": {
                    "signature_": {
                      "args": [
                        {
                          "description": "The image to select bands from.",
                          "type": "Image",
                          "name": "input",
                          "default": null
                        },
                        {
                          "description": "A list of names, regexes, or numeric indices specifying the bands to select.",
                          "type": "List",
                          "name": "bandSelectors",
                          "default": null
                        },
                        {
                          "description": "Optional new names for the output bands. Must match the number of bands selected.",
                          "type": "List",
                          "name": "newNames",
                          "default": null,
                          "optional": true
                        }
                      ],
                      "description": "Selects bands from an image by name, RE2-compatible regex, or index and optionally renames them.",
                      "returns": "Image",
                      "name": "Image.select"
                    }
                  },
                  "args": {
                    "input": {
                      "func": null,
                      "args": null,
                      "varName": "_MAPPING_VAR_0_0",
                      "sourceFrame": null
                    },
                    "bandSelectors": {
                      "func": null,
                      "args": null,
                      "varName": null,
                      "sourceFrame": null,
                      "list_": [
                        "mean_2m_air_temperature"
                      ]
                    }
                  },
                  "varName": null,
                  "sourceFrame": null
                }
              }
            },
            "varName": null
          }
        },
        "varName": null,
        "sourceFrame": null
      },
      "image2": {
        "func": {
          "signature_": {
            "args": [
              {
                "description": "The value of the pixels in the constant image. Must be a number or an Array or a list of numbers or Arrays.",
                "type": "Object",
                "name": "value",
                "default": null
              }
            ],
            "description": "Generates an image containing a constant value everywhere.",
            "returns": "Image",
            "name": "Image.constant"
          }
        },
        "args": {
          "value": 273.15
        },
        "varName": null,
        "sourceFrame": null
      }
    },
    "varName": null,
    "sourceFrame": null
  }
}
Successfully generated map ID: projects/earthengine-legacy/maps/34f96c6ef44bef63b91d346fc2e9f7a0-4ada8d93a9b45a469a4087b93f4002fd
EE-timelapse-layer endpoint called
Generating timelapse for year: 2000
Loading ERA5 dataset for year 2000...
Checking dataset size...
Found 365 images for year 2000
Calculating mean temperature...
Generating map ID and token...
Earth Engine result received: {
  "mapid": "projects/earthengine-legacy/maps/34f96c6ef44bef63b91d346fc2e9f7a0-81167b504c34a3dd48720dfb2f2ce348",
  "token": "",
  "urlFormat": "https://earthengine.googleapis.com/v1/projects/earthengine-legacy/maps/34f96c6ef44bef63b91d346fc2e9f7a0-81167b504c34a3dd48720dfb2f2ce348/tiles/{z}/{x}/{y}",
  "image": {
    "func": {
      "signature_": {
        "args": [
          {
            "description": "The image from which the left operand bands are taken.",
            "type": "Image",
            "name": "image1",
            "default": null
          },
          {
            "description": "The image from which the right operand bands are taken.",
            "type": "Image",
            "name": "image2",
            "default": null
          }
        ],
        "description": "Subtracts the second value from the first for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.",
        "returns": "Image",
        "name": "Image.subtract"
      }
    },
    "args": {
      "image1": {
        "func": {
          "signature_": {
            "args": [
              {
                "description": "The image collection to reduce.",
                "type": "ImageCollection",
                "name": "collection",
                "default": null
              }
            ],
            "description": "Reduces an image collection by calculating the mean of all values at each pixel across the stack of all matching bands. Bands are matched by name.",
            "returns": "Image",
            "name": "reduce.mean"
          }
        },
        "args": {
          "collection": {
            "func": {
              "signature_": {
                "args": [
                  {
                    "description": "The collection of the elements to which the algorithm is applied.",
                    "type": "FeatureCollection",
                    "name": "collection",
                    "default": null
                  },
                  {
                    "description": "The algorithm being applied to each element.",
                    "type": "Algorithm",
                    "name": "baseAlgorithm",
                    "default": null
                  },
                  {
                    "description": "If true, the mapped algorithm is allowed to return nulls, and the elements for which it returns nulls will be dropped.",
                    "type": "Boolean",
                    "name": "dropNulls",
                    "default": false,
                    "optional": true
                  }
                ],
                "description": "Maps an algorithm over a collection.",
                "returns": "FeatureCollection",
                "name": "Collection.map"
              }
            },
            "args": {
              "collection": {
                "func": {
                  "signature_": {
                    "args": [
                      {
                        "description": "The collection to filter.",
                        "type": "FeatureCollection",
                        "name": "collection",
                        "default": null
                      },
                      {
                        "description": "The filter to apply to the collection. Either a Filter object or a string to be parsed into a Filter object (e.g., \"property > value\"). Supported operators include: >, >=, <, <=, ==, !=, (), !, &&, ||, as well as 'and', 'or', 'not', and 'in' for inList.",
                        "type": "Object",
                        "name": "filter",
                        "default": null
                      }
                    ],
                    "description": "Applies a filter to a given collection.",
                    "returns": "FeatureCollection",
                    "name": "Collection.filter"
                  }
                },
                "args": {
                  "collection": {
                    "func": {
                      "signature_": {
                        "args": [
                          {
                            "description": "The asset ID of the image collection.",
                            "type": "String",
                            "name": "id",
                            "default": null
                          },
                          {
                            "description": "The version of the asset. -1 signifies the latest version.",
                            "type": "Long",
                            "name": "version",
                            "default": null,
                            "optional": true
                          }
                        ],
                        "description": "Returns the image collection given its ID.",
                        "returns": "ImageCollection",
                        "name": "ImageCollection.load"
                      }
                    },
                    "args": {
                      "id": "ECMWF/ERA5/DAILY"
                    },
                    "varName": null,
                    "sourceFrame": null
                  },
                  "filter": {
                    "func": {
                      "signature_": {
                        "args": [
                          {
                            "description": "A selector for the left operand. Should not be specified if leftValue is specified.",
                            "type": "String",
                            "name": "leftField",
                            "default": null,
                            "optional": true
                          },
                          {
                            "description": "The value of the right operand. Should not be specified if rightField is specified.",
                            "type": "Object",
                            "name": "rightValue",
                            "default": null,
                            "optional": true
                          },
                          {
                            "description": "A selector for the right operand. Should not be specified if rightValue is specified.",
                            "type": "String",
                            "name": "rightField",
                            "default": null,
                            "optional": true
                          },
                          {
                            "description": "The value of the left operand. Should not be specified if leftField is specified.",
                            "type": "Object",
                            "name": "leftValue",
                            "default": null,
                            "optional": true
                          }
                        ],
                        "description": "Creates a unary or binary filter that passes if the left operand, a date range, contains the right operand, a date.",
                        "returns": "Filter",
                        "name": "Filter.dateRangeContains"
                      }
                    },
                    "args": {
                      "rightField": {
                        "func": null,
                        "args": null,
                        "varName": null,
                        "sourceFrame": null,
                        "string_": "system:time_start"
                      },
                      "leftValue": {
                        "func": {
                          "signature_": {
                            "args": [
                              {
                                "description": "",
                                "type": "Object",
                                "name": "start",
                                "default": null
                              },
                              {
                                "description": "",
                                "type": "Object",
                                "name": "end",
                                "default": null,
                                "optional": true
                              },
                              {
                                "description": "If start and/or end are provided as strings, the time zone in which to interpret them; defaults to UTC.",
                                "type": "String",
                                "name": "timeZone",
                                "default": null,
                                "optional": true
                              }
                            ],
                            "description": "Creates a DateRange with the given start (inclusive) and end (exclusive), which may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). If 'end' is not specified, a 1-millisecond range starting at 'start' is created.",
                            "returns": "DateRange",
                            "name": "DateRange",
                            "isConstructor": true
                          }
                        },
                        "args": {
                          "start": "2000-01-01",
                          "end": "2000-12-31"
                        },
                        "varName": null,
                        "sourceFrame": null
                      }
                    },
                    "varName": null,
                    "sourceFrame": null,
                    "filter_": [
                      {
                        "func": {
                          "signature_": {
                            "args": [
                              {
                                "description": "A selector for the left operand. Should not be specified if leftValue is specified.",
                                "type": "String",
                                "name": "leftField",
                                "default": null,
                                "optional": true
                              },
                              {
                                "description": "The value of the right operand. Should not be specified if rightField is specified.",
                                "type": "Object",
                                "name": "rightValue",
                                "default": null,
                                "optional": true
                              },
                              {
                                "description": "A selector for the right operand. Should not be specified if rightValue is specified.",
                                "type": "String",
                                "name": "rightField",
                                "default": null,
                                "optional": true
                              },
                              {
                                "description": "The value of the left operand. Should not be specified if leftField is specified.",
                                "type": "Object",
                                "name": "leftValue",
                                "default": null,
                                "optional": true
                              }
                            ],
                            "description": "Creates a unary or binary filter that passes if the left operand, a date range, contains the right operand, a date.",
                            "returns": "Filter",
                            "name": "Filter.dateRangeContains"
                          }
                        },
                        "args": {
                          "rightField": {
                            "func": null,
                            "args": null,
                            "varName": null,
                            "sourceFrame": null,
                            "string_": "system:time_start"
                          },
                          "leftValue": {
                            "func": {
                              "signature_": {
                                "args": [
                                  {
                                    "description": "",
                                    "type": "Object",
                                    "name": "start",
                                    "default": null
                                  },
                                  {
                                    "description": "",
                                    "type": "Object",
                                    "name": "end",
                                    "default": null,
                                    "optional": true
                                  },
                                  {
                                    "description": "If start and/or end are provided as strings, the time zone in which to interpret them; defaults to UTC.",
                                    "type": "String",
                                    "name": "timeZone",
                                    "default": null,
                                    "optional": true
                                  }
                                ],
                                "description": "Creates a DateRange with the given start (inclusive) and end (exclusive), which may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). If 'end' is not specified, a 1-millisecond range starting at 'start' is created.",
                                "returns": "DateRange",
                                "name": "DateRange",
                                "isConstructor": true
                              }
                            },
                            "args": {
                              "start": "2000-01-01",
                              "end": "2000-12-31"
                            },
                            "varName": null,
                            "sourceFrame": null
                          }
                        },
                        "varName": null,
                        "sourceFrame": null
                      }
                    ]
                  }
                },
                "varName": null
              },
              "baseAlgorithm": {
                "signature_": {
                  "name": "",
                  "returns": "Object",
                  "args": [
                    {
                      "name": "_MAPPING_VAR_0_0",
                      "type": "Object"
                    }
                  ]
                },
                "body_": {
                  "func": {
                    "signature_": {
                      "args": [
                        {
                          "description": "The image to select bands from.",
                          "type": "Image",
                          "name": "input",
                          "default": null
                        },
                        {
                          "description": "A list of names, regexes, or numeric indices specifying the bands to select.",
                          "type": "List",
                          "name": "bandSelectors",
                          "default": null
                        },
                        {
                          "description": "Optional new names for the output bands. Must match the number of bands selected.",
                          "type": "List",
                          "name": "newNames",
                          "default": null,
                          "optional": true
                        }
                      ],
                      "description": "Selects bands from an image by name, RE2-compatible regex, or index and optionally renames them.",
                      "returns": "Image",
                      "name": "Image.select"
                    }
                  },
                  "args": {
                    "input": {
                      "func": null,
                      "args": null,
                      "varName": "_MAPPING_VAR_0_0",
                      "sourceFrame": null
                    },
                    "bandSelectors": {
                      "func": null,
                      "args": null,
                      "varName": null,
                      "sourceFrame": null,
                      "list_": [
                        "mean_2m_air_temperature"
                      ]
                    }
                  },
                  "varName": null,
                  "sourceFrame": null
                }
              }
            },
            "varName": null
          }
        },
        "varName": null,
        "sourceFrame": null
      },
      "image2": {
        "func": {
          "signature_": {
            "args": [
              {
                "description": "The value of the pixels in the constant image. Must be a number or an Array or a list of numbers or Arrays.",
                "type": "Object",
                "name": "value",
                "default": null
              }
            ],
            "description": "Generates an image containing a constant value everywhere.",
            "returns": "Image",
            "name": "Image.constant"
          }
        },
        "args": {
          "value": 273.15
        },
        "varName": null,
        "sourceFrame": null
      }
    },
    "varName": null,
    "sourceFrame": null
  }
}
Successfully generated map ID: projects/earthengine-legacy/maps/34f96c6ef44bef63b91d346fc2e9f7a0-81167b504c34a3dd48720dfb2f2ce348
